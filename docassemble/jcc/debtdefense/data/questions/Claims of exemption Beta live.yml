---
modules:
- docassemble.base.util
- docassemble.jcc.abilitytopay.a2papi
---
features:
  bootstrap theme: style.css
  progress bar: True
  javascript: a2p.js
---
initial: True
code: |
  import datetime
  import types
  class FalseBoolean(object):
    def primitive_value(self):
      return False
    def is_undefined(self):
      return False
    def __nonzero__(self):
      return False
    def logical_and(self, arg):
      return self
    def logical_or(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (TrueBoolean() if arg.__nonzero__() else self)
    def logical_not(self):
      return TrueBoolean()
    def logical_equals(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else TrueBoolean())
  class TrueBoolean(object):
    def primitive_value(self):
      return True
    def is_undefined(self):
      return False
    def __nonzero__(self):
      return True
    def logical_and(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else FalseBoolean())
    def logical_or(self, arg):
      return self
    def logical_not(self):
      return FalseBoolean()
    def logical_equals(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else FalseBoolean())
  class Undefined(object):
    def is_undefined(self):
      return True
    def __nonzero__(self):
      return False
    def primitive_value(self):
      return False
    def logical_and(self, arg):
      if arg.is_undefined():
        return self
      else:
        return (self if arg.__nonzero__() else augment(False))
    def logical_or(self, arg):
      if arg.is_undefined():
        return self
      else:
        return (augment(True) if arg.__nonzero__() else self)
    def logical_not(self):
      return self
    def logical_equals(self, arg):
      return self
    def all_true(self):
      return self
    def all_false(self):
      return self
    def any_true(self):
      return self
    def all_false(self):
      return self
    def __add__(self, other):
      return self
    def __mul__(self, other):
      return self
    def __sub__(self, other):
      return self
    def __div__(self, other):
      return self
    def __eq__(self, other):
      return self
    def __lt__(self, other):
      return self
    def __le__(self, other):
      return self
    def __gt__(self, other):
      return self
    def __ge__(self, other):
      return self
    def __ne__(self, other):
      return self
    def __len__(self):
      return self
  class Datetime(datetime.datetime):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return datetime.datetime(self.year, self.month, self.day, self.hour, self.minute, self.second, self.microsecond, self.tzinfo)
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Time(datetime.time):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return datetime.time(self.hour, self.minute, self.second, self.microsecond, self.tzinfo)
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Float(float):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return float(self)
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __mul__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() * (other.primitive_value()))
    def __sub__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() - (other.primitive_value()))
    def __div__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() / (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Integer(int):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return int(self)
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __mul__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() * (other.primitive_value()))
    def __sub__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() - (other.primitive_value()))
    def __div__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() / (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class String(str):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return str(self)
    def __len__(self):
      return Integer(self.primitive_value().__len__())
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == (other.primitive_value()))
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < (other.primitive_value()))
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= (other.primitive_value()))
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > (other.primitive_value()))
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= (other.primitive_value()))
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != (other.primitive_value()))
  class Dictionary(object):
    def __init__(self, da_dict):
      self.da_dict = da_dict
    def is_undefined(self):
      return False
    def primitive_value(self):
      return self.da_dict
    def all_true(self):
      return augment(self.da_dict.all_true())
    def all_false(self):
      return augment(self.da_dict.all_false())
    def any_true(self):
      return augment(self.da_dict.any_true())
    def any_false(self):
      return augment(self.da_dict.any_false())
    def __str__(self):
      return str(self.da_dict)
  def augment(something):
    string_type = type('a')
    bool_type = type(True)
    integer_type = type(1)
    float_type = type(1.0)
    time_type = type(datetime.time())
    datetime_type = type(datetime.datetime(1, 1, 1))
    my_type = type(something)
    alt_type = something.__class__.__name__
    if(my_type == string_type or alt_type == 'unicode'):
      return String(something)
    elif(my_type == bool_type):
      if(something == True):
        return TrueBoolean()
      else:
        return FalseBoolean()
    elif(my_type == integer_type or alt_type == 'int'):
      return Integer(something)
    elif(my_type == float_type or alt_type == 'float'):
      return Float(something)
    elif(my_type == time_type):
      return Time(something.hour, something.minute, something.second, something.microsecond, something.tzinfo)
    elif(my_type == datetime_type or alt_type == 'DADateTime'):
      return Datetime(something.year, something.month, something.day, something.hour, something.minute, something.second, something.microsecond, something.tzinfo)
    elif(alt_type == 'DADict'):
      return Dictionary(something)
    raise Exception("Couldn't augment because type() is " + str(my_type) + " and alt type is " + alt_type + " and argument was " + str(something))
  def ternary(condition, true_value, false_value):
    if type(condition) == type(Undefined()):
      return Undefined()
    elif condition:
      return true_value
    else:
      return false_value

---
initial: True
code: |
  import re
  from bs4 import BeautifulSoup
  from markdown import markdown

  def markdown_to_plaintext(markdown_string):
    html = markdown(markdown_string)
    html = re.sub(r'<pre>(.*?)</pre>', ' ', html)
    html = re.sub(r'<code>(.*?)</code >', ' ', html)
    soup = BeautifulSoup(html, "html.parser")
    text = ''.join(soup.findAll(text=True))
    return text
---

mandatory: True
code: |
	def ___define_until_idempotent():
		original_dict = all_variables()
		___define_all()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_all():
		vars = all_variables()
		if ((not ("coe_yes" in vars)) and (type((((((augment(notice_type["bank_notice"]) if ("notice_type" in vars) else Undefined()))).logical_or(((augment(notice_type["ewo_notice"]) if ("notice_type" in vars) else Undefined())))).logical_or(((augment(notice_type["levy_other"]) if ("notice_type" in vars) else Undefined()))))) != type(Undefined()))):
			define("coe_yes", ((((((augment(notice_type["bank_notice"]) if ("notice_type" in vars) else Undefined()))).logical_or(((augment(notice_type["ewo_notice"]) if ("notice_type" in vars) else Undefined())))).logical_or(((augment(notice_type["levy_other"]) if ("notice_type" in vars) else Undefined())))).primitive_value()))
		if ((not ("financial_yes" in vars)) and (type((((((augment(funds_source_multi["source_wages"]) if ("funds_source_multi" in vars) else Undefined()))).logical_or(((augment(ewo_options) if ("ewo_options" in vars) else Undefined()) == (augment("partial_exempt"))))).logical_or(((augment(ewo_options) if ("ewo_options" in vars) else Undefined()) == (augment("full_exempt")))))) != type(Undefined()))):
			define("financial_yes", ((((((augment(funds_source_multi["source_wages"]) if ("funds_source_multi" in vars) else Undefined()))).logical_or(((augment(ewo_options) if ("ewo_options" in vars) else Undefined()) == (augment("partial_exempt"))))).logical_or(((augment(ewo_options) if ("ewo_options" in vars) else Undefined()) == (augment("full_exempt"))))).primitive_value()))
		if ((not ("with_total" in vars)) and (type(((((augment(with_amt1) if ("with_amt1" in vars) else Undefined()) + ((augment(with_amt2) if ("with_amt2" in vars) else Undefined())))) + (((augment(with_amt3) if ("with_amt3" in vars) else Undefined()) + ((augment(taxes) if ("taxes" in vars) else Undefined())))))) != type(Undefined()))):
			define("with_total", (((((augment(with_amt1) if ("with_amt1" in vars) else Undefined()) + ((augment(with_amt2) if ("with_amt2" in vars) else Undefined())))) + (((augment(with_amt3) if ("with_amt3" in vars) else Undefined()) + ((augment(taxes) if ("taxes" in vars) else Undefined()))))).primitive_value()))
		if ((not ("net_income" in vars)) and (type((((augment(gross_income) if ("gross_income" in vars) else Undefined()) - ((augment(with_total) if ("with_total" in vars) else Undefined()))))) != type(Undefined()))):
			define("net_income", ((((augment(gross_income) if ("gross_income" in vars) else Undefined()) - ((augment(with_total) if ("with_total" in vars) else Undefined())))).primitive_value()))
		if ((not ("total_takehome" in vars)) and (type((((augment(net_income) if ("net_income" in vars) else Undefined()) + ((augment(other_inc_amt) if ("other_inc_amt" in vars) else Undefined()))))) != type(Undefined()))):
			define("total_takehome", ((((augment(net_income) if ("net_income" in vars) else Undefined()) + ((augment(other_inc_amt) if ("other_inc_amt" in vars) else Undefined())))).primitive_value()))
		if ((not ("total_accts" in vars)) and (type((((augment(chk_amt) if ("chk_amt" in vars) else Undefined()) + ((augment(svg_amt) if ("svg_amt" in vars) else Undefined()))))) != type(Undefined()))):
			define("total_accts", ((((augment(chk_amt) if ("chk_amt" in vars) else Undefined()) + ((augment(svg_amt) if ("svg_amt" in vars) else Undefined())))).primitive_value()))
		if ((not ("car_total" in vars)) and (type(((((augment(car1_val) if ("car1_val" in vars) else Undefined()) + ((augment(car2_val) if ("car2_val" in vars) else Undefined())))) + (((augment(car3_val) if ("car3_val" in vars) else Undefined()))))) != type(Undefined()))):
			define("car_total", (((((augment(car1_val) if ("car1_val" in vars) else Undefined()) + ((augment(car2_val) if ("car2_val" in vars) else Undefined())))) + (((augment(car3_val) if ("car3_val" in vars) else Undefined())))).primitive_value()))
		if ((not ("total_expenses" in vars)) and (type((((((((((augment(rent) if ("rent" in vars) else Undefined()) + ((augment(food) if ("food" in vars) else Undefined())))) + (((augment(utilities) if ("utilities" in vars) else Undefined()) + ((augment(clothing) if ("clothing" in vars) else Undefined()))))) + (((augment(medical) if ("medical" in vars) else Undefined()) + ((augment(insurance) if ("insurance" in vars) else Undefined()))))) + (((augment(childcare) if ("childcare" in vars) else Undefined()) + ((augment(family_supp) if ("family_supp" in vars) else Undefined()))))) + (((augment(trans) if ("trans" in vars) else Undefined()) + ((augment(laundry) if ("laundry" in vars) else Undefined()))))) + (((augment(entertainment) if ("entertainment" in vars) else Undefined()) + ((augment(other_val) if ("other_val" in vars) else Undefined()))))) + (((augment(total_install) if ("total_install" in vars) else Undefined()))))) != type(Undefined()))):
			define("total_expenses", ((((((((((augment(rent) if ("rent" in vars) else Undefined()) + ((augment(food) if ("food" in vars) else Undefined())))) + (((augment(utilities) if ("utilities" in vars) else Undefined()) + ((augment(clothing) if ("clothing" in vars) else Undefined()))))) + (((augment(medical) if ("medical" in vars) else Undefined()) + ((augment(insurance) if ("insurance" in vars) else Undefined()))))) + (((augment(childcare) if ("childcare" in vars) else Undefined()) + ((augment(family_supp) if ("family_supp" in vars) else Undefined()))))) + (((augment(trans) if ("trans" in vars) else Undefined()) + ((augment(laundry) if ("laundry" in vars) else Undefined()))))) + (((augment(entertainment) if ("entertainment" in vars) else Undefined()) + ((augment(other_val) if ("other_val" in vars) else Undefined()))))) + (((augment(total_install) if ("total_install" in vars) else Undefined())))).primitive_value()))
		if ((not ("total_install" in vars)) and (type((((((augment(paymt1_def) if ("paymt1_def" in vars) else Undefined()) + ((augment(paymt2_def) if ("paymt2_def" in vars) else Undefined())))) + (((augment(paymt3_def) if ("paymt3_def" in vars) else Undefined()) + ((augment(paymt4_def) if ("paymt4_def" in vars) else Undefined()))))) + (((augment(paymt5_def) if ("paymt5_def" in vars) else Undefined()) + ((augment(paymt6_def) if ("paymt6_def" in vars) else Undefined())))))) != type(Undefined()))):
			define("total_install", ((((((augment(paymt1_def) if ("paymt1_def" in vars) else Undefined()) + ((augment(paymt2_def) if ("paymt2_def" in vars) else Undefined())))) + (((augment(paymt3_def) if ("paymt3_def" in vars) else Undefined()) + ((augment(paymt4_def) if ("paymt4_def" in vars) else Undefined()))))) + (((augment(paymt5_def) if ("paymt5_def" in vars) else Undefined()) + ((augment(paymt6_def) if ("paymt6_def" in vars) else Undefined()))))).primitive_value()))
		if ((not ("exemption_statute" in vars)) and (type((ternary((augment(funds_source_multi["source_wages"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Civ Code Section 706.051"), (ternary((augment(funds_source_multi["source_ss"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Civ Code Section 704.080"), (ternary((augment(funds_source_multi["source_ssdi"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Civ Code Section 704.130"), (ternary((augment(funds_source_multi["source_401k"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Section 704.115"), (ternary((augment(funds_source_multi["source_finaid"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc 704.190"), (ternary((augment(funds_source_multi["source_charity"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 704.170"), (ternary((augment(funds_source_multi["source_pri_pension"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc 704.115"), (ternary((augment(funds_source_multi["source_ssi"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 704.080"), (ternary((augment(funds_source_multi["source_pub_pension"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 704.110"), (ternary((augment(funds_source_multi["source_savings"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 706.051 and 704.070"), augment("")))))))))))))))))))))) != type(Undefined()))):
			define("exemption_statute", ((ternary((augment(funds_source_multi["source_wages"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Civ Code Section 706.051"), (ternary((augment(funds_source_multi["source_ss"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Civ Code Section 704.080"), (ternary((augment(funds_source_multi["source_ssdi"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Civ Code Section 704.130"), (ternary((augment(funds_source_multi["source_401k"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Section 704.115"), (ternary((augment(funds_source_multi["source_finaid"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc 704.190"), (ternary((augment(funds_source_multi["source_charity"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 704.170"), (ternary((augment(funds_source_multi["source_pri_pension"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc 704.115"), (ternary((augment(funds_source_multi["source_ssi"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 704.080"), (ternary((augment(funds_source_multi["source_pub_pension"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 704.110"), (ternary((augment(funds_source_multi["source_savings"]) if ("funds_source_multi" in vars) else Undefined()), augment("Cal Code Civ Proc Section 706.051"), augment(""))))))))))))))))))))).primitive_value()))
		if ((not ("paymt1_def" in vars)) and (type((ternary((augment(installments["student_loans"]) if ("installments" in vars) else Undefined()), (augment(paymt1) if ("paymt1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("paymt1_def", ((ternary((augment(installments["student_loans"]) if ("installments" in vars) else Undefined()), (augment(paymt1) if ("paymt1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("paymt2_def" in vars)) and (type((ternary((augment(installments["car_pymt"]) if ("installments" in vars) else Undefined()), (augment(paymt2) if ("paymt2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("paymt2_def", ((ternary((augment(installments["car_pymt"]) if ("installments" in vars) else Undefined()), (augment(paymt2) if ("paymt2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("paymt3_def" in vars)) and (type((ternary((augment(installments["credit_cards"]) if ("installments" in vars) else Undefined()), (augment(paymt3) if ("paymt3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("paymt3_def", ((ternary((augment(installments["credit_cards"]) if ("installments" in vars) else Undefined()), (augment(paymt3) if ("paymt3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("paymt4_def" in vars)) and (type((ternary((augment(installments["loan1"]) if ("installments" in vars) else Undefined()), (augment(paymt4) if ("paymt4" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("paymt4_def", ((ternary((augment(installments["loan1"]) if ("installments" in vars) else Undefined()), (augment(paymt4) if ("paymt4" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("paymt5_def" in vars)) and (type((ternary((augment(installments["medical"]) if ("installments" in vars) else Undefined()), (augment(paymt5) if ("paymt5" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("paymt5_def", ((ternary((augment(installments["medical"]) if ("installments" in vars) else Undefined()), (augment(paymt5) if ("paymt5" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("paymt6_def" in vars)) and (type((ternary((augment(installments["other_install"]) if ("installments" in vars) else Undefined()), (augment(paymt6) if ("paymt6" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("paymt6_def", ((ternary((augment(installments["other_install"]) if ("installments" in vars) else Undefined()), (augment(paymt6) if ("paymt6" in vars) else Undefined()), augment(0))).primitive_value()))

---
initial: True
code: |
	___define_until_idempotent()
---

features:
	debug: False
#	inverse navbar: False
---
metadata:
	title: |
		Post-Judgment Claims of Exemption-Beta

---
mandatory: |
	True
question: ''
subquestion: |
	# Claims of Exemption from Debt Collection

	**We understand that you have a debt collection judgment against you that someone is trying to collect. You are on the right track to figuring out what to do next!** **This set of questions will help you to understand where you are in this process and will help you assert your rights!**
field: unique_id

---
mandatory: |
	True
question: ''
subquestion: |
	Please let us know what kind of notice you received. Please select all which you received.
fields:
	- "Type of notice": notice_type
		datatype: checkboxes
		required: true
		choices:
			- "I recieved a notice from my employer": "ewo_notice"
			- "I received a notice from my bank telling my account is frozen": "bank_notice"
			- "I received a notice from the court that a judgment was entered": "entry_of_judgment_notice"
			- "I received a notice of levy for something other than a bank account": "levy_other"
			- "I haven't received any notices but I know or think there's a judgment entered against me": "no_notice"
		none of the above: False

---
mandatory: |
	(((((augment(notice_type["ewo_notice"]) if defined("notice_type") else Undefined()).logical_not())).logical_and(((augment(notice_type["bank_notice"]) if defined("notice_type") else Undefined()).logical_not()))).logical_and(((augment(notice_type["levy_other"]) if defined("notice_type") else Undefined()).logical_not())))
question: ''
subquestion: |
	**A creditor can try to collect on a judgment by levying your bank account or garnishing your payment, but this does not necessarily happen right away.**


	**If you have received a notice from the court about a judgment, but not yet any notice from your bank or employer, please see [https://jcc.prelive.opencities.com/Alpha-Services/Consumer-Debt/Protecting-Your-Income-and-Property ](https://jcc.prelive.opencities.com/Alpha-Services/Consumer-Debt/Protecting-Your-Income-and-Property)for more information.**


	**If you haven't received any noticed and would like to look up information about your court case online, you can visit your local county Superior Court website and click on "online case information."**

---
mandatory: |
	(((augment(coe_yes) if defined("coe_yes") else Undefined())))
question: ''
subquestion: |
	Are you the person named in the lawsuit? By this question, we mean, is your name listed as the Defendant in this case? For example, a lawsuit might be called "Creditor vs. You." Or, it might have another person's name on it, but the creditor has sent you a notice about your bank account or property. If you are **NOT** the person named in the lawsuit, click "no" below.
fields:
	- "I am the person named in the lawsuit": is_defendant
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='is_defendant'/>

	- "Please write the defendant's name and address, if you have it": jd_name_address
		datatype: text
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='jd_name_address'/>

script: |
  <script>
    // Those fields which should be conditionally shown
    var jd_name_address_field = $('#jd_name_address').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      is_defendant: null,
			jd_name_address: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {

    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: jd_name_address, field: jd_name_address_field, required: false, callback: function() { return [false, 'False'].includes(allVariableValues['is_defendant']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>

---
mandatory: |
	(((augment(is_defendant) if defined("is_defendant") else Undefined()).logical_not()))
question: ''
subquestion: |
	Thanks for telling us that you are not the person named in the lawsuit! You should file a third-party claim of exemption. [Click here ](https://community.lawyer/cl/annaclairejohnson/new-app-2)for a new interview that will help you with that form. Thank you!!

---
mandatory: |
	(((augment(notice_type["bank_notice"]) if defined("notice_type") else Undefined())))
question: ''
subquestion: |
	Thanks for telling us that you recieved a notice that your bank account has been frozen. You must get your Claim of Exemption submitted within **TEN** days of the date on the notice or the money in your bank account will be delivered to the creditor.
fields:
	- "Are you within ten days of the date of the notice?": notice_date
		datatype: yesnoradio
		required: true

---
mandatory: |
	(((augment(notice_type["levy_other"]) if defined("notice_type") else Undefined())))
question: ''
subquestion: |
	Thank you for telling us that you received a notice that property (other than a bank account) is being levied. You have TEN DAYS to file a claim of exemption. Are you within ten days of the date on the notice?
fields:
	- "Are you within ten days of the notice?": notice_date2
		datatype: yesnoradio
		required: true

---
mandatory: |
	((((augment(notice_date) if defined("notice_date") else Undefined()).logical_not())).logical_or(((augment(notice_date2) if defined("notice_date2") else Undefined()).logical_not())))
question: ''
subquestion: |
	Based on your responses, we understand that you received a notice of levy, but you received that notice more than ten days ago. Unfortunately, the law says you can only file a Claim of Exemption for a bank account or personal property within ten days. We have more information [here](https://jcc.prelive.opencities.com/Alpha-Services/Consumer-Debt/Protecting-Your-Income-and-Property) about how to protect your money or property after a judgment.


	If you learned about the judgment within the last six months, you may be able to file a Motion to Set Aside. **Go [here](https://jcc.prelive.opencities.com/Alpha-Services/Consumer-Debt) to learn more about setting aside a judgment.**

---
mandatory: |
	(((augment(notice_date) if defined("notice_date") else Undefined())))
question: ''
subquestion: |
	# Bank Levy Claim of Exemption

	Great! Since you are within ten days of your bank levy notice, let's see if your income can be considered exempt, which means you could get it back! The next set of questions ask about where the money in your bank account came from and will help us figure out if it is protected. If you have money in your bank account from more than one source, please select multiple options.
fields:
	- "The money in my bank account is from this/these source(s)": funds_source_multi
		datatype: checkboxes
		required: true
		choices:
			- "Social Security": "source_ss"
			- "Social Security Disability Insurance": "source_ssdi"
			- "Supplemental Security Income (SSI)": "source_ssi"
			- "Public pension": "source_pub_pension"
			- "Private pension": "source_pri_pension"
			- "401k or other private retirement account or distributions": "source_401k"
			- "Student loans or educational grants": "source_finaid"
			- "Money from my paycheck": "source_wages"
			- "Savings": "source_savings"
			- "Charity": "source_charity"
			- "Other": "source_other"
		none of the above: False
		html: |
			<span hidden data-variable data-event-type='change' id='funds_source_multi'/>

	- "If you selected \"Other\" please describe the source of the funds": source_other_details
		datatype: text
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='source_other_details'/>

script: |
  <script>
    // Those fields which should be conditionally shown
    var source_other_details_field = $('#source_other_details').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      funds_source_multi: { "source_ss": null,
				"source_ssdi": null,
				"source_ssi": null,
				"source_pub_pension": null,
				"source_pri_pension": null,
				"source_401k": null,
				"source_finaid": null,
				"source_wages": null,
				"source_savings": null,
				"source_charity": null,
				"source_other": null, },
			source_other_details: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      funds_source_multi: {
				"Social Security": "source_ss",
				"Social Security Disability Insurance": "source_ssdi",
				"Supplemental Security Income (SSI)": "source_ssi",
				"Public pension": "source_pub_pension",
				"Private pension": "source_pri_pension",
				"401k or other private retirement account or distributions": "source_401k",
				"Student loans or educational grants": "source_finaid",
				"Money from my paycheck": "source_wages",
				"Savings": "source_savings",
				"Charity": "source_charity",
				"Other": "source_other"}
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: source_other_details, field: source_other_details_field, required: false, callback: function() { return [true, 'True'].includes(allVariableValues['funds_source_multi']['source_other'] ) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>

---
mandatory: |
	(((augment(notice_type["ewo_notice"]) if defined("notice_type") else Undefined())))
question: ''
subquestion: |
	# Wage garnishment order:
	You have told us that you received a notice from your employer that your wages are going to be garnished to pay for a judgment. If the court entered the judgment after a trial, the court's order is that you owe the money alleged in the lawsuit. But, you can still act to protect your money if you can't afford to pay the judgment out of your paycheck right now.


	**Set aside a default judgment:**

	If you just learned about this judgment or if a default judgment was entered against you in the last six months, we can also help you to understand how to try to set aside (undo) the default judgment. But, even if you plan to set aside the judgment, you may want to submit a Claim of Exemption to stop the wage garnishment.
fields:
	- "Please select the option that best describes your financial situation": ewo_options
		input type: combobox
		required: true
		datatype: text
		choices:
			- "I need all my money from my paycheck to pay my monthly expenese. I want to ask for a full Claim of Exemption.": "full_exempt"
			- "I can pay some money from my paycheck but I can't afford the 25% that is being garnished right now. I want to ask for a partial Claim of Exemption.": "partial_exempt"
			- "I have enough money left over each month in my paycheck to let the wage garnishment continue until the judgment is paid in full.": "no_ewo"

---
mandatory: |
	(((augment(ewo_options) if defined("ewo_options") else Undefined()) == (augment("partial_exempt"))))
question: ''
subquestion: |
	Think about how much your bills and expenses are each month. Please estimate how much money of your check you need to live on and calculate what you can afford to offer to pay. Please give us your best guess of the money you need each month.


	Next, please tell us how much money (in dollars) you can afford to pay out of each paycheck. We will put this information in your Claim of Exemption and the creditor can decide whether to accept your offer to pay a lesser amount.
fields:
	- "I need this amount of money to pay my bills each month": ewo_need
		datatype: currency
		required: true

	- "I can afford to pay this amount per paycheck:": ewo_offer
		datatype: currency
		required: true

---
mandatory: |
	(((augment(ewo_options) if defined("ewo_options") else Undefined()) == (augment("no_ewo"))))
question: ''
subquestion: |
	You have told us that you can afford to pay off this judgment through the wage garnishment order. The wage garnishment will continue until the judgment is paid off. If your financial circumstances change and you want to request a Claim of Exemption, please come back and fill out this interview again! If you learned about this judgment within the last six months and would like more information on **[setting aside a default judgment, click here. ](https://jcc.prelive.opencities.com/Alpha-Services/Consumer-Debt/Protecting-Your-Income-and-Property )**

---
mandatory: |
	(((augment(coe_yes) if defined("coe_yes") else Undefined())))
question: ''
subquestion: |
	Thanks for answering the first set of questions! Great job. Based on your responses, you may want to file a Claim of Exemption because your money may be protected against collection activity!


	To complete the Claim of Exemption, we need some information about your court case and about you. First, tell us where the court can contact you:
fields:
	- "Your full name": defendant_full_name
		datatype: text
		required: true

	- "Your street address": defendant_address_1
		datatype: text
		required: true

	- "Your city, state, & zip code": defendant_address_2
		datatype: text
		required: true

	- "Your phone number": defendant_phone
		datatype: text
		required: true

	- "Your email address": defendant_email
		datatype: email
		required: false

---
mandatory: |
	(((augment(coe_yes) if defined("coe_yes") else Undefined())))
question: ''
subquestion: |
	Please tell us about the court case. You can get this information from any papers sent to you by the court.


	If you don't have a notice from the court, most of this information will be on the notice from your bank or your employer. You may look up the case information online on your local county court website or go to the court records office to get a copy of the papers from the court case.
fields:
	- "County case was filed in": county_name
		datatype: text
		required: true

	- "Court street address": court_address
		datatype: text
		required: true

	- "Court city, state, & zip code": court_address2
		datatype: text
		required: true

	- "Court branch (if listed)": court_branch
		datatype: text
		required: false

	- "Plaintiff name (this is the name of the creditor, which is the company that filed the lawsuit)": plaintiff_name
		datatype: text
		required: true

	- "Court case number": case_no_
		datatype: text
		required: true

	- "Levying officer file number": levy_no
		datatype: text
		required: true

	- "Court case name (ex: Creditor vs. Your Name)": case
		datatype: text
		required: true

---
mandatory: |
	(((augment(notice_type["levy_other"]) if defined("notice_type") else Undefined())))
question: ''
subquestion: |
	The most common kind of property that creditors try to collect is money in a bank account. Please confirm that this notice of levy is for something other than money in a bank account.
fields:
	- "I received a notice of levy for something other than money in my bank account": confirm_bank
		datatype: yesnoradio
		required: true

---
mandatory: |
	(((augment(confirm_bank) if defined("confirm_bank") else Undefined())))
question: ''
subquestion: |
	You indicated that the property you are claiming as exempt is not money in a bank account. This form can also be used to claim as exempt some other kinds of property. Please tell us what property you are claiming as exempt.
fields:
	- "The property is a car, or proceeds from selling a car": car_exempt
		datatype: yesnoradio
		required: false

	- "The property a vehicle or other objects that I use in a business": tools_exempt
		datatype: yesnoradio
		required: false

	- "Please describe the property you claim as exempt": pers_prop
		datatype: text
		required: false

	- "The property is the loan value of life insurance policies": life_ins
		datatype: yesnoradio
		required: false

	- "Tell us more about the life insurance policies, please": life_ins_info
		datatype: text
		required: false

---
mandatory: |
	(((augment(notice_date) if defined("notice_date") else Undefined())))
question: ''
subquestion: |
	Tell us about the money in the bank account that you claim to be exempt.
fields:
	- "Describe the bank account, by listing the bank name": exempt_prop_
		datatype: text
		required: true

	- "This money in this bank account came from (ex: Social Security, my wages, studen loan, etc.)": exempt_facts
		datatype: text
		required: true

	- "If money in the bank account is from more than one source, list the other sources here": exempt_facts_attachment
		datatype: text
		required: false

---
mandatory: |
	(((augment(coe_yes) if defined("coe_yes") else Undefined())))
question: ''
subquestion: |
	The court should send all papers related to my Claim of Exemption request to:
fields:
	- "Please send papers to:": send_to
		datatype: checkboxes
		required: true
		choices:
			- "Me at the address I have provided": "send_to_me"
			- "My attorney": "send_to_atty"
			- "Me at a new address": "send_to_new"
		none of the above: False
		html: |
			<span hidden data-variable data-event-type='change' id='send_to'/>

	- "What is the new address?": where_to_send
		datatype: text
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='where_to_send'/>

script: |
  <script>
    // Those fields which should be conditionally shown
    var where_to_send_field = $('#where_to_send').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      send_to: { "send_to_me": null,
				"send_to_atty": null,
				"send_to_new": null, },
			where_to_send: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      send_to: {
				"Me at the address I have provided": "send_to_me",
				"My attorney": "send_to_atty",
				"Me at a new address": "send_to_new"}
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: where_to_send, field: where_to_send_field, required: false, callback: function() { return [true, 'True'].includes(allVariableValues['send_to']['send_to_new'] ) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>

---
mandatory: |
	((((augment(ewo_options) if defined("ewo_options") else Undefined()) == (augment("partial_exempt")))).logical_or(((augment(ewo_options) if defined("ewo_options") else Undefined()) == (augment("full_exempt")))))
question: ''
subquestion: |
	How frequently do you get paid? If you have more than one job, you can select more than one option.
fields:
	- "I am paid:": pay_period
		datatype: checkboxes
		required: true
		choices:
			- "Every week": "weekly"
			- "Every two weeks": "biweekly"
			- "Two times a month": "first_and_fifteenth"
			- "Monthly": "monthly"
			- "Daily": "daily"
			- "Other": "paid_other"
		none of the above: False
		html: |
			<span hidden data-variable data-event-type='change' id='pay_period'/>

	- "Other pay period": paid_other_details
		datatype: text
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='paid_other_details'/>

script: |
  <script>
    // Those fields which should be conditionally shown
    var paid_other_details_field = $('#paid_other_details').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      pay_period: { "weekly": null,
				"biweekly": null,
				"first_and_fifteenth": null,
				"monthly": null,
				"daily": null,
				"paid_other": null, },
			paid_other_details: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      pay_period: {
				"Every week": "weekly",
				"Every two weeks": "biweekly",
				"Two times a month": "first_and_fifteenth",
				"Monthly": "monthly",
				"Daily": "daily",
				"Other": "paid_other"}
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: paid_other_details, field: paid_other_details_field, required: false, callback: function() { return [true, 'True'].includes(allVariableValues['pay_period']['paid_other'] ) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Based on your responses, your Claim of Exemption is based on the fact that you are employed and you need your income to help support yourself and your family.


	This next set of questions is going to tell the judge how much money your earn and what your monthly expenses are. This will finish with a form you can print out and attach to either your Bank Levy Claim of Exemption or your Wage Garnishment Claim of Exemption. Let's get started!


	Please answer the next set of questions about your household's income and expenses to complete your claim of exemption.
fields:
	- "Are you married?": married
		input type: radio
		required: true
		datatype: text
		choices:
			- "": "Yes"
			- "": "No"

	- "Do other people, like children or seniors, depend on you for support?": dependents_yesno
		input type: radio
		required: true
		datatype: text
		choices:
			- "": "yes"
			- "": "no"

---
mandatory: |
	(((augment(married) if defined("married") else Undefined()) == (augment("Yes"))))
question: ''
subquestion: |
	Please tell us about your spouse's monthly takehome income (after taxes) and the source of income (ex: "employment" or "disability" or "Social Security').
fields:
	- "Spouse's Name": spouse_name
		datatype: text
		required: true

	- "Spouse Age": spouse_age
		datatype: number
		required: true

	- "Spouse's monthly takehome income and source of income": spouse_income
		datatype: text
		required: true

---
mandatory: |
	(((augment(dependents_yesno) if defined("dependents_yesno") else Undefined()) == (augment("yes"))))
question: ''
subquestion: |
	Please add information about other people in your household who rely on you for support, such as children (including adult children), or seniors.
fields:
	- "Dependent name": dependent_name1
		datatype: text
		required: true

	- "Dependent name": dependent_name2
		datatype: text
		required: false

	- "Dependent name": dependent_name3
		datatype: text
		required: false

	- "Dependent name": dependent_name4
		datatype: text
		required: false

---
mandatory: |
	(((augment(dependents_yesno) if defined("dependents_yesno") else Undefined()) == (augment("yes"))))
question: ''
subquestion: |
	What are the ages of your dependents?
fields:
	- "${dependent_name1} age": d_age1
		datatype: number
		required: true

	- "${dependent_name2} age": d_age2
		datatype: number
		required: false

	- "${dependent_name3} age": d_age3
		datatype: number
		required: false

	- "${dependent_name4} age": d_age4
		datatype: number
		required: false

---
mandatory: |
	(((augment(dependents_yesno) if defined("dependents_yesno") else Undefined()) == (augment("yes"))))
question: ''
subquestion: |
	What is the relationship to each of your dependents to you? (ex: son, granddaughter, mother, etc.)
fields:
	- "${dependent_name1} relationship to you": d_ship1
		datatype: text
		required: true

	- "${dependent_name2}": d_ship2
		datatype: text
		required: false

	- "${dependent_name3}": d_ship3
		datatype: text
		required: false

	- "${dependent_name4}": d_ship4
		datatype: text
		required: false

---
mandatory: |
	(((augment(dependents_yesno) if defined("dependents_yesno") else Undefined()) == (augment("yes"))))
question: ''
subquestion: |
	What is the income of each of your dependent and from what source? (ex: employment, SSI, Social Security, none). Put "0" if your dependent has no income.
fields:
	- "${dependent_name1} income": d_income1
		datatype: text
		required: true

	- "${dependent_name2} income": d_income2
		datatype: text
		required: false

	- "${dependent_name3} income": d_income3
		datatype: text
		required: false

	- "${dependent_name4} income": d_income4
		datatype: text
		required: false

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Now we are going to ask some questions about your monthly income. It will be helpful if you have a paystub available to answer the next set of questions. Click continue once you have located your paystub.
field: paystub

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Please include money from your paycheck and then add any other money that you regularly get every month, like from spousal support, a pension, or Social Security. You do not need to include non-cash benefits like food stamps. Put "0" if the question does not apply to you.
fields:
	- "My pay every month before taxes is:": gross_income
		datatype: number
		required: true

	- "The taxes (federal, state, FICA & SDI) are:": taxes
		datatype: number
		required: true

	- "Health insurance withholding:": with_amt1
		datatype: number
		required: false

	- "Union dues or other withholding:": with_amt2
		datatype: number
		required: false

	- "Other withholding": with_amt3
		datatype: number
		required: false

	- "Do you get monthly income from another source? Please list the type of income here": other_income
		datatype: text
		required: false

	- "If you get income from another source every month, please list that amount here": other_inc_amt
		datatype: number
		required: false

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Based on the information you have provided, your total monthly takehome income (after taxes and deductions) is ${total_takehome}
fields:
	- "Does this amount look right to you?": income_review_block
		datatype: yesnoradio
		required: true

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Now we are going to ask some questions about your property so that court can make a determination about you claim of exemption. If you have the following kinds of property, you will be prompted to give some more information about the value of the things you own.
fields:
	- "Do you own any of the following kinds of property?": prop_yesnos
		datatype: checkboxes
		required: false
		choices:
			- "Bank accounts": "bank_yes"
			- "Cars or other vehicles": "cars_yes"
			- "Real property (a house, condo, or land)": "realprop_yes"
			- "Other expensive property like stocks, bonds, furs, or expensive jewelry": "fancy_stuff_yes"
		none of the above: False

	- "How much cash do you have on hand?": cash
		datatype: currency
		required: false

---
mandatory: |
	(((augment(prop_yesnos["bank_yes"]) if defined("prop_yesnos") else Undefined())))
question: ''
subquestion: |

fields:
	- "Checking account bank name:": checking
		datatype: text
		required: false

	- "Checking account balance": chk_amt
		datatype: number
		required: false

	- "Savings account bank name": savings
		datatype: text
		required: false

	- "Savings account balance": svg_amt
		datatype: number
		required: false

---
mandatory: |
	(((augment(prop_yesnos["cars_yes"]) if defined("prop_yesnos") else Undefined())))
question: ''
subquestion: |
	Please list the make and year of each car and the value (minus any loan balance). If the loan value is more than the car is worth, you can write 0.
fields:
	- "Car 1 make and year": car1
		datatype: text
		required: true

	- "Car 1 value": car1_val
		datatype: number
		required: true

	- "Car 2 make and year": car2
		datatype: text
		required: false

	- "Car 2 value": car2_val
		datatype: number
		required: false

	- "Car 3 make and year": car3
		datatype: text
		required: false

	- "Car 3 value": car3_val
		datatype: number
		required: false

---
mandatory: |
	(((augment(prop_yesnos["realprop_yes"]) if defined("prop_yesnos") else Undefined())))
question: ''
subquestion: |
	What is the equity in the property (or properties) that you own? Equity is the value minus the loan balances. If you owe more than your property is worth, you should enter 0 for the equity.
fields:
	- "Real estate equity total": real_equity
		datatype: number
		required: true

---
mandatory: |
	(((augment(prop_yesnos["fancy_stuff_yes"]) if defined("prop_yesnos") else Undefined())))
question: ''
subquestion: |
	Tell us about the value of any stocks, bonds, or expensive jewelry or other items with a high value.
fields:
	- "Please describe the property": fancy_stuff
		datatype: text
		required: true

	- "Property value (estimated total)": fancy_value
		datatype: number
		required: true

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Please tell us about your monthly expenses. Use your best estimate of the average of what you pay for each of these things each month. This list is for bills that come due each month for living expenses. We will ask you later about your credit card, car loan, student loan, payday loan, or other loan payments. Put "0" if you do not have this monthly expense.
fields:
	- "Rent or mortgage (including any HOA dues)": rent
		datatype: number
		required: true

	- "Food and household supplies": food
		datatype: number
		required: true

	- "Utilities (including cable, cell phone, power, water, & garbage)": utilities
		datatype: number
		required: true

	- "Clothing (one month average of yearly costs)": clothing
		datatype: number
		required: true

	- "Medical and dental out-of-pocket payments": medical
		datatype: number
		required: true

	- "Insurance (life, health, homeowners or renters)": insurance
		datatype: number
		required: true

	- "School tuition or childcare costs": childcare
		datatype: number
		required: true

	- "Child or spousal support from a prior relationship": family_supp
		datatype: number
		required: true

	- "Transportation and auto expenses (insurance, gas, repairs, public transit)": trans
		datatype: number
		required: true

	- "Laundry and cleaning": laundry
		datatype: number
		required: true

	- "Entertainment": entertainment
		datatype: number
		required: true

	- "Other monthly expense (describe here)": other_expense
		datatype: text
		required: true

	- "Cost per month of other monthly expenses": other_val
		datatype: number
		required: true

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |
	Do you have any of the following payments?
fields:
	- "Click all which apply": installments
		datatype: checkboxes
		required: false
		choices:
			- "Student loan payments": "student_loans"
			- "Car payments": "car_pymt"
			- "Credit card payments": "credit_cards"
			- "Line of credit or loan": "loan1"
			- "Medical debt payments": "medical"
			- "Other monthly installment payments": "other_install"
		none of the above: False

---
mandatory: |
	(((augment(installments["student_loans"]) if defined("installments") else Undefined())))
question: ''
subquestion: |
	Tell us about your monthly student loan payments:
fields:
	- "Student loan creditors (list on one line)": creditor1
		datatype: text
		required: false

	- "Monthly total student loan payments": paymt1
		datatype: number
		required: false

	- "Balance owed on student loans": balance1
		datatype: number
		required: false

	- "Name of family member who owes these loans": owed_by1
		datatype: text
		required: false

---
mandatory: |
	(((augment(installments["car_pymt"]) if defined("installments") else Undefined())))
question: ''
subquestion: |
	Tell us about your monthly car payments:
fields:
	- "Who do you make your car payments to (list all on one line)": creditor2
		datatype: text
		required: false

	- "What is the total amount you pay monthly for car lease or loan payments?": paymt2
		datatype: number
		required: false

	- "What is the total balance on your car loans?": balance2
		datatype: number
		required: false

	- "Name of the family member(s) who owe on these loans": owed_by2
		datatype: text
		required: false

---
mandatory: |
	(((augment(installments["credit_cards"]) if defined("installments") else Undefined())))
question: ''
subquestion: |
	Tell us about your credit card payments.
fields:
	- "Who do you make your payments to?": creditor3
		datatype: text
		required: false

	- "How much do you pay per month?": paymt3
		datatype: number
		required: false

	- "What is the estimated balance on your credit cards in total?": balance3
		datatype: text
		required: false

	- "Name of the family member(s) who owes on these bills": owed_by3
		datatype: text
		required: false

---
mandatory: |
	(((augment(installments["loan1"]) if defined("installments") else Undefined())))
question: ''
subquestion: |
	Tell us about your other loans or lines of credit that you pay monthly.
fields:
	- "Who do you make the payments to?": creditor4
		datatype: text
		required: false

	- "How much do you pay per month?": paymt4
		datatype: number
		required: false

	- "What is the estimated balance owed on this loan?": balance4
		datatype: number
		required: false

	- "Name of the family member(s) who owes on this loan": owed_by4
		datatype: text
		required: false

---
mandatory: |
	(((augment(installments["medical"]) if defined("installments") else Undefined())))
question: ''
subquestion: |
	Please tell us about monthly medical payments.
fields:
	- "Who do you make these payments to?": creditor5
		datatype: text
		required: false

	- "How much do you pay  per month?": paymt5
		datatype: number
		required: false

	- "How much is the balance remaining on this debt?": balance5
		datatype: number
		required: false

	- "Name of the family member(s) who owes on this debt?": owed_by5
		datatype: text
		required: false

---
mandatory: |
	(((augment(installments["other_install"]) if defined("installments") else Undefined())))
question: ''
subquestion: |
	Please tell us about your additional monthly payments for debts.
fields:
	- "Who do you make payments to?": creditor6
		datatype: text
		required: false

	- "How much do you pay per month?": paymt6
		datatype: number
		required: false

	- "What is the balance that you still owe on this debt?": balance6
		datatype: number
		required: false

	- "Name of the family member(s) who owes this debt": variable_4
		datatype: text
		required: false

---
mandatory: |
	((((augment(ewo_options) if defined("ewo_options") else Undefined()) == (augment("full_exempt")))).logical_or(((augment(ewo_options) if defined("ewo_options") else Undefined()) == (augment("partial_exempt")))))
question: ''
subquestion: |
	We are almost done! Please tell us a little bit more about any additional hardship you or your family may be experiencing that makes it hard for you to pay this judgment out of your paycheck.


	For example, please explain if someone has been sick, has unusual medical needs, if you have expenses for school tuition, or if you have had a recent family emergency.
fields:
	- "Is there an existing paycheck garnishment for someone in your family?": ewo_already
		datatype: checkboxes
		required: false
		choices:
			- "There is an earnings withholding order in place for someone in my family.": "ewo_already_yes"
			- "There is a child or spousal support order in place for someone in my family.": "fso_already_yes"
		none of the above: False
		html: |
			<span hidden data-variable data-event-type='change' id='ewo_already'/>

	- "Please tell us about any additional hardships": other_facts
		datatype: area
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='other_facts'/>

	- "Please list the family member's name and the amount of the monthly withholding": ewo_already_amt
		datatype: text
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='ewo_already_amt'/>

	- "Please list the family member's name and the amount of the withholding": fso_already_amt
		datatype: text
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='fso_already_amt'/>

script: |
  <script>
    // Those fields which should be conditionally shown
    var ewo_already_amt_field = $('#ewo_already_amt').closest('.form-group');
		var fso_already_amt_field = $('#fso_already_amt').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      ewo_already: { "ewo_already_yes": null,
				"fso_already_yes": null, },
			other_facts: null,
			ewo_already_amt: null,
			fso_already_amt: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      ewo_already: {
				"There is an earnings withholding order in place for someone in my family.": "ewo_already_yes",
				"There is a child or spousal support order in place for someone in my family.": "fso_already_yes"}
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: ewo_already_amt, field: ewo_already_amt_field, required: false, callback: function() { return [true, 'True'].includes(allVariableValues['ewo_already']['ewo_already_yes'] ) } },
			{ shouldShow: false, variableName: fso_already_amt, field: fso_already_amt_field, required: false, callback: function() { return [true, 'True'].includes(allVariableValues['ewo_already']['fso_already_yes'] ) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |


	Please fill in your signature here:
signature: def_sig
under: |

---
mandatory: |
	(((augment(financial_yes) if defined("financial_yes") else Undefined())))
question: ''
subquestion: |


	If you are married, your spouse will need to sign this financial information form unless you are living separate and apart.
fields:
	- "": spouse_sig_boxes
		datatype: checkboxes
		required: true
		choices:
			- "My spouse will sign this form": "spouse_signs"
			- "I have no spouse": "no_spouse"
			- "My spouse and I are living separate and apart": "spouse_apart"
		none of the above: False

	- "Today's date is:": __date
		datatype: date
		required: true

---
mandatory: |
	(((augment(married) if defined("married") else Undefined()) == (augment("Yes"))))
question: ''
subquestion: |
	Please have your spouse fill in their signature here:
signature: spouse_sig
under: |

---
mandatory: |
	(((augment(coe_yes) if defined("coe_yes") else Undefined())))
question: ''
subquestion: |
	Thank you! Click here to download your Claim of Exemption forms. Next steps:


	- Print three copies of your forms.
	- Take two copies of your downloaded forms and send or hand deliver it to the sheriff's office on the notice you got from the court, the bank, or your employer.
	- Keep one copy for your records.

	Wait to see if the creditor objects to your Claim of Exemption.

	- If there is no objection, the court will grant your request for an exemption and bank levy will be lifted, or the wage garnishment will stop.
	- If there is an objection, the court will schedule a hearing. Watch the mail for information from the court! [See here ](link to info on JCC site)for more information about how to prepare for the hearing.

attachment code: |
	filter(bool, [ternary(notice_type["bank_notice"], Bank_Levy_Claim_of_Exemption_a3ec4868fa73, ""), ternary(notice_type["ewo_notice"], Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a, ""), ternary(financial_yes, Financial_Statement_7f40b808a533, "")])
allow emailing: False
---
code: |
	coe_yes = ((((augment(notice_type["bank_notice"]))).logical_or((augment(notice_type["ewo_notice"])))).logical_or((augment(notice_type["levy_other"])))).primitive_value()
---

code: |
	financial_yes = ((((augment(funds_source_multi["source_wages"]))).logical_or((augment(ewo_options) == (augment("partial_exempt"))))).logical_or((augment(ewo_options) == (augment("full_exempt"))))).primitive_value()
---

code: |
	with_total = (((augment(with_amt1) + (augment(with_amt2)))) + ((augment(with_amt3) + (augment(taxes))))).primitive_value()
---

code: |
	net_income = ((augment(gross_income) - (augment(with_total)))).primitive_value()
---

code: |
	total_takehome = ((augment(net_income) + (augment(other_inc_amt)))).primitive_value()
---

code: |
	total_accts = ((augment(chk_amt) + (augment(svg_amt)))).primitive_value()
---

code: |
	car_total = (((augment(car1_val) + (augment(car2_val)))) + ((augment(car3_val)))).primitive_value()
---

code: |
	total_expenses = ((((((((augment(rent) + (augment(food)))) + ((augment(utilities) + (augment(clothing))))) + ((augment(medical) + (augment(insurance))))) + ((augment(childcare) + (augment(family_supp))))) + ((augment(trans) + (augment(laundry))))) + ((augment(entertainment) + (augment(other_val))))) + ((augment(total_install)))).primitive_value()
---

code: |
	total_install = ((((augment(paymt1_def) + (augment(paymt2_def)))) + ((augment(paymt3_def) + (augment(paymt4_def))))) + ((augment(paymt5_def) + (augment(paymt6_def))))).primitive_value()
---

code: |
	exemption_statute = (ternary(funds_source_multi["source_wages"], "Cal Civ Code Section 706.051", (ternary(funds_source_multi["source_ss"], "Cal Civ Code Section 704.080", (ternary(funds_source_multi["source_ssdi"], "Cal Civ Code Section 704.130", (ternary(funds_source_multi["source_401k"], "Cal Code Civ Section 704.115", (ternary(funds_source_multi["source_finaid"], "Cal Code Civ Proc 704.190", (ternary(funds_source_multi["source_charity"], "Cal Code Civ Proc Section 704.170", (ternary(funds_source_multi["source_pri_pension"], "Cal Code Civ Proc 704.115", (ternary(funds_source_multi["source_ssi"], "Cal Code Civ Proc Section 704.080", (ternary(funds_source_multi["source_pub_pension"], "Cal Code Civ Proc Section 704.110", (ternary(funds_source_multi["source_savings"], "Cal Code Civ Proc Section 706.051", ""))))))))))))))))))))
---

code: |
	paymt1_def = (ternary(installments["student_loans"], paymt1, 0))
---

code: |
	paymt2_def = (ternary(installments["car_pymt"], paymt2, 0))
---

code: |
	paymt3_def = (ternary(installments["credit_cards"], paymt3, 0))
---

code: |
	paymt4_def = (ternary(installments["loan1"], paymt4, 0))
---

code: |
	paymt5_def = (ternary(installments["medical"], paymt5, 0))
---

code: |
	paymt6_def = (ternary(installments["other_install"], paymt6, 0))
---

code: |
	import requests
	import json
	import time
	template_id = 624
	access_key = 'WJtFzG74JR'
	drawn_variables = {'11608': markdown_to_plaintext(str(pay_period["paid_other"] == True if defined("pay_period") else "")), '11607': markdown_to_plaintext(str(pay_period["monthly"] == True if defined("pay_period") else "")), '11606': markdown_to_plaintext(str(pay_period["first_and_fifteenth"] == True if defined("pay_period") else "")), '11605': markdown_to_plaintext(str(pay_period["biweekly"] == True if defined("pay_period") else "")), '11604': markdown_to_plaintext(str(pay_period["weekly"] == True if defined("pay_period") else "")), '11595': markdown_to_plaintext(str(send_to["send_to_me"] == True if defined("send_to") else "")), '11594': markdown_to_plaintext(str(send_to["send_to_new"] == True if defined("send_to") else "")), '11596': markdown_to_plaintext(str(send_to["send_to_atty"] == True if defined("send_to") else "")), '11597': markdown_to_plaintext(str(send_to["send_to_me"] == True if defined("send_to") else "")), '11600': str(ewo_options == "full_exempt") if defined("ewo_options") else "", '11603': markdown_to_plaintext(str(pay_period["daily"] == True if defined("pay_period") else "")), '11602': markdown_to_plaintext(str((def_sig.url_for() if def_sig != "" else "") if defined("def_sig") else "")), '11601': str(ewo_options == "partial_exempt") if defined("ewo_options") else "", '11599': str(ewo_options == "partial_exempt") if defined("ewo_options") else "", '11598': str(ewo_options == "full_exempt") if defined("ewo_options") else ""}
	fillable_variables = {'FillText99': markdown_to_plaintext(str(paid_other_details if defined("paid_other_details") else "")), 'FillText91': markdown_to_plaintext(str(where_to_send if defined("where_to_send") else "")), 'FillText107': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText103': markdown_to_plaintext(str((__date.strftime('%m-%d-%Y') if __date != "" else "") if defined("__date") else "")), 'FillText87': markdown_to_plaintext(str(ewo_need if defined("ewo_need") else "")), 'FillText95': markdown_to_plaintext(str(ewo_offer if defined("ewo_offer") else "")), 'FillText83': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText67': markdown_to_plaintext(str(plaintiff_name if defined("plaintiff_name") else "")), 'FillText71': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText63': markdown_to_plaintext(str(court_branch if defined("court_branch") else "")), 'FillText59': markdown_to_plaintext(str(court_address2 if defined("court_address2") else "")), 'FillText51': markdown_to_plaintext(str(court_address if defined("court_address") else "")), 'FillText38': markdown_to_plaintext(str(county_name if defined("county_name") else "")), 'FillText34': markdown_to_plaintext(str(in_pro_per if defined("in_pro_per") else "")), 'FillText30': markdown_to_plaintext(str(defendant_email if defined("defendant_email") else "")), 'FillText26': markdown_to_plaintext(str(defendant_phone)), 'FillText17': markdown_to_plaintext(str(defendant_address_2)), 'FillText180': markdown_to_plaintext(str(defendant_address_1)), 'FillText25': markdown_to_plaintext(str(defendant_full_name)), 'FillText79': markdown_to_plaintext(str(case_no_)), 'FillText75': markdown_to_plaintext(str(levy_no))}
	post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables, 'fillable_target_variables': fillable_variables }
	fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
	task_id = fill_response.get('task_id')
	filled_attachment_url = ""
	done = False
	pdf_attempts = 0
	while not done and pdf_attempts < 250:
		task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
		done = task_response.get('status') == 'done'
		filled_attachment_url = task_response.get('document')
		pdf_attempts += 1
		time.sleep(.2)
	Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a = DAFileCollection()
	Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a.pdf = DAFile()
	Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a.pdf.initialize(extension="pdf")
	if done:
		Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a.pdf.from_url(filled_attachment_url)
		Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a.info = {'name': 'Wage Garnishment Claim of Exemption', 'filename': 'Wage_Garnishment_Claim_of_Exemption', 'description': ''}
	else:
		Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a.pdf.from_url('https://community.lawyer/static/blank.pdf')
		Wage_Garnishment_Claim_of_Exemption_f3c5e36e228a.info = {'name': 'We encountered a problem', 'filename': 'Wage_Garnishment_Claim_of_Exemption', 'description': 'There was a problem filling your Pdf - please try again'}
---

---
code: |
	import requests
	import json
	import time
	template_id = 623
	access_key = 'ojMO69sX0U'
	drawn_variables = {'11593': markdown_to_plaintext(str(case_no_ if defined("case_no_") else "")), '11592': markdown_to_plaintext(str(levy_no if defined("levy_no") else "")), '11591': markdown_to_plaintext(str(case if defined("case") else "")), '11589': markdown_to_plaintext(str(ewo_already["fso_already_yes"] == True if defined("ewo_already") else "")), '11590': markdown_to_plaintext(str(ewo_already["ewo_already_yes"] == True if defined("ewo_already") else "")), '11588': markdown_to_plaintext(str(spouse_sig_boxes["spouse_signs"] == True if defined("spouse_sig_boxes") else "")), '11582': markdown_to_plaintext(str((def_sig.url_for() if def_sig != "" else "") if defined("def_sig") else "")), '11584': markdown_to_plaintext(str(case if defined("case") else "")), '11585': markdown_to_plaintext(str(case_no_)), '11586': markdown_to_plaintext(str(spouse_sig_boxes["spouse_apart"] == True if defined("spouse_sig_boxes") else "")), '11587': markdown_to_plaintext(str(spouse_sig_boxes["no_spouse"] == True if defined("spouse_sig_boxes") else "")), '11583': markdown_to_plaintext(str(levy_no)), '11581': markdown_to_plaintext(str((spouse_sig.url_for() if spouse_sig != "" else "") if defined("spouse_sig") else ""))}
	fillable_variables = {'FillText96': markdown_to_plaintext(str(owed_by2 if defined("owed_by2") else "")), 'FillText100': markdown_to_plaintext(str(balance3 if defined("balance3") else "")), 'FillText99': markdown_to_plaintext(str(paymt3 if defined("paymt3") else "")), 'FillText120': markdown_to_plaintext(str(fso_already_amt if defined("fso_already_amt") else "")), 'FillText117': markdown_to_plaintext(str(ewo_already_amt if defined("ewo_already_amt") else "")), 'FillText25': markdown_to_plaintext(str(other_inc_amt if defined("other_inc_amt") else "")), 'FillText35': markdown_to_plaintext(str(gross_income)), 'FillText12': markdown_to_plaintext(str((__date.strftime('%m-%d-%Y') if __date != "" else "") if defined("__date") else "")), 'FillText69': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText23': markdown_to_plaintext(str(total_takehome)), 'FillText26': markdown_to_plaintext(str(net_income if defined("net_income") else "")), 'FillText27': markdown_to_plaintext(str(with_total)), 'FillText68': markdown_to_plaintext(str(spouse_name if defined("spouse_name") else "")), 'FillText121': markdown_to_plaintext(str(other_facts if defined("other_facts") else "")), 'FillText111': markdown_to_plaintext(str(owed_by5 if defined("owed_by5") else "")), 'FillText106': markdown_to_plaintext(str(owed_by4 if defined("owed_by4") else "")), 'FillText101': markdown_to_plaintext(str(owed_by3 if defined("owed_by3") else "")), 'FillText115': markdown_to_plaintext(str(balance6 if defined("balance6") else "")), 'FillText110': markdown_to_plaintext(str(balance5 if defined("balance5") else "")), 'FillText105': markdown_to_plaintext(str(balance4 if defined("balance4") else "")), 'FillText109': markdown_to_plaintext(str(paymt5 if defined("paymt5") else "")), 'FillText104': markdown_to_plaintext(str(paymt4 if defined("paymt4") else "")), 'FillText112': markdown_to_plaintext(str(creditor6 if defined("creditor6") else "")), 'FillText107': markdown_to_plaintext(str(creditor5 if defined("creditor5") else "")), 'FillText102': markdown_to_plaintext(str(creditor4 if defined("creditor4") else "")), 'FillText42': markdown_to_plaintext(str(spouse_income if defined("spouse_income") else "")), 'FillText40': markdown_to_plaintext(str(spouse_name if defined("spouse_name") else "")), 'FillText97': markdown_to_plaintext(str(creditor3 if defined("creditor3") else "")), 'FillText94': markdown_to_plaintext(str(paymt2 if defined("paymt2") else "")), 'FillText92': markdown_to_plaintext(str(creditor2 if defined("creditor2") else "")), 'FillText90': markdown_to_plaintext(str(balance1 if defined("balance1") else "")), 'FillText91': markdown_to_plaintext(str(owed_by1 if defined("owed_by1") else "")), 'FillText89': markdown_to_plaintext(str(paymt1 if defined("paymt1") else "")), 'FillText87': markdown_to_plaintext(str(creditor1 if defined("creditor1") else "")), 'FillTxt39': markdown_to_plaintext(str(other_expense if defined("other_expense") else "")), 'FillText71': markdown_to_plaintext(str(other_val if defined("other_val") else "")), 'FillText72': markdown_to_plaintext(str(entertainment if defined("entertainment") else "")), 'FillText73': markdown_to_plaintext(str(laundry if defined("laundry") else "")), 'FillText74': markdown_to_plaintext(str(total_install if defined("total_install") else "")), 'FillText75': markdown_to_plaintext(str(trans if defined("trans") else "")), 'FillText77': markdown_to_plaintext(str(childcare if defined("childcare") else "")), 'FillText78': markdown_to_plaintext(str(insurance if defined("insurance") else "")), 'FillText79': markdown_to_plaintext(str(medical if defined("medical") else "")), 'FillText80': markdown_to_plaintext(str(clothing if defined("clothing") else "")), 'FillText81': markdown_to_plaintext(str(utilities if defined("utilities") else "")), 'FillText82': markdown_to_plaintext(str(food if defined("food") else "")), 'FillText1': markdown_to_plaintext(str(fancy_value if defined("fancy_value") else "")), 'FillText4': markdown_to_plaintext(str(car3_val if defined("car3_val") else "")), 'FillText5': markdown_to_plaintext(str(car3 if defined("car3") else "")), 'FillText6': markdown_to_plaintext(str(car2_val if defined("car2_val") else "")), 'FillText7': markdown_to_plaintext(str(car2 if defined("car2") else "")), 'FillText9': markdown_to_plaintext(str(car1 if defined("car1") else "")), 'FillText17': markdown_to_plaintext(str(total_accts if defined("total_accts") else "")), 'FillText18': markdown_to_plaintext(str(svg_amt if defined("svg_amt") else "")), 'FillText20': markdown_to_plaintext(str(chk_amt if defined("chk_amt") else "")), 'FillText21': markdown_to_plaintext(str(checking if defined("checking") else "")), 'FillText24': markdown_to_plaintext(str(other_income if defined("other_income") else "")), 'FillText30': markdown_to_plaintext(str(with_amt2 if defined("with_amt2") else "")), 'FillText32': markdown_to_plaintext(str(with_amt1 if defined("with_amt1") else "")), 'FillText29': markdown_to_plaintext(str(with_3 if defined("with_3") else "")), 'FillText31': markdown_to_plaintext(str(with_2 if defined("with_2") else "")), 'FillText33': markdown_to_plaintext(str(with_1 if defined("with_1") else "")), 'FillText34': markdown_to_plaintext(str(taxes if defined("taxes") else "")), 'FillText58': markdown_to_plaintext(str(d_income4 if defined("d_income4") else "")), 'FillText54': markdown_to_plaintext(str(d_income3 if defined("d_income3") else "")), 'FillText50': markdown_to_plaintext(str(d_income2 if defined("d_income2") else "")), 'FillText46': markdown_to_plaintext(str(d_income1 if defined("d_income1") else "")), 'FillText59': markdown_to_plaintext(str(d_ship4 if defined("d_ship4") else "")), 'FillText55': markdown_to_plaintext(str(d_ship3 if defined("d_ship3") else "")), 'FillText51': markdown_to_plaintext(str(d_ship2 if defined("d_ship2") else "")), 'FillText57': markdown_to_plaintext(str(d_age4 if defined("d_age4") else "")), 'FillText53': markdown_to_plaintext(str(d_age3 if defined("d_age3") else "")), 'FillText49': markdown_to_plaintext(str(d_age2 if defined("d_age2") else "")), 'FillText45': markdown_to_plaintext(str(d_age1 if defined("d_age1") else "")), 'FillText56': markdown_to_plaintext(str(dependent_name4 if defined("dependent_name4") else "")), 'FillText52': markdown_to_plaintext(str(dependent_name3 if defined("dependent_name3") else "")), 'FillText41': markdown_to_plaintext(str(spouse_age if defined("spouse_age") else "")), 'FillText116': markdown_to_plaintext(str(owed_by6 if defined("owed_by6") else "")), 'FillText114': markdown_to_plaintext(str(paymt6 if defined("paymt6") else "")), 'FillText95': markdown_to_plaintext(str(balance2 if defined("balance2") else "")), 'FillText76': markdown_to_plaintext(str(family_support if defined("family_support") else "")), 'FillText83': markdown_to_plaintext(str(rent if defined("rent") else "")), 'FillText8': markdown_to_plaintext(str(car1_val if defined("car1_val") else "")), 'FillText28': markdown_to_plaintext(str(with_amt3 if defined("with_amt3") else "")), 'FillText70': markdown_to_plaintext(str(total_expenses)), 'FillText22': markdown_to_plaintext(str(cash if defined("cash") else "")), 'FillText47': markdown_to_plaintext(str(d_ship1 if defined("d_ship1") else "")), 'FillText48': markdown_to_plaintext(str(dependent_name2 if defined("dependent_name2") else "")), 'FillText44': markdown_to_plaintext(str(dependent_name1 if defined("dependent_name1") else "")), 'FillText2': markdown_to_plaintext(str(real_equity if defined("real_equity") else "")), 'FillText3': markdown_to_plaintext(str(car_total if defined("car_total") else ""))}
	post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables, 'fillable_target_variables': fillable_variables }
	fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
	task_id = fill_response.get('task_id')
	filled_attachment_url = ""
	done = False
	pdf_attempts = 0
	while not done and pdf_attempts < 250:
		task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
		done = task_response.get('status') == 'done'
		filled_attachment_url = task_response.get('document')
		pdf_attempts += 1
		time.sleep(.2)
	Financial_Statement_7f40b808a533 = DAFileCollection()
	Financial_Statement_7f40b808a533.pdf = DAFile()
	Financial_Statement_7f40b808a533.pdf.initialize(extension="pdf")
	if done:
		Financial_Statement_7f40b808a533.pdf.from_url(filled_attachment_url)
		Financial_Statement_7f40b808a533.info = {'name': 'Financial Statement', 'filename': 'Financial_Statement', 'description': ''}
	else:
		Financial_Statement_7f40b808a533.pdf.from_url('https://community.lawyer/static/blank.pdf')
		Financial_Statement_7f40b808a533.info = {'name': 'We encountered a problem', 'filename': 'Financial_Statement', 'description': 'There was a problem filling your Pdf - please try again'}
---

---
code: |
	import requests
	import json
	import time
	template_id = 622
	access_key = 'D5oF4RCm86'
	drawn_variables = {'11577': str(is_defendant == False) if defined("is_defendant") else "", '11575': str(confirm_bank == True) if defined("confirm_bank") else "", '11576': markdown_to_plaintext(str(funds_source_multi["source_wages"] == True if defined("funds_source_multi") else "")), '11570': markdown_to_plaintext(str(send_to["send_to_new"] == True if defined("send_to") else "")), '11580': markdown_to_plaintext(str(send_to["send_to_me"] == True if defined("send_to") else "")), '11578': markdown_to_plaintext(str(send_to["send_to_atty"] == True if defined("send_to") else "")), '11579': markdown_to_plaintext(str(send_to["send_to_me"] == True if defined("send_to") else "")), '11573': str(tools_exempt == True) if defined("tools_exempt") else "", '11571': markdown_to_plaintext(str((def_sig.url_for() if def_sig != "" else "") if defined("def_sig") else "")), '11574': markdown_to_plaintext(str(car_exempt_is_True if defined("car_exempt_is_True") else "")), '11572': str(life_ins == True) if defined("life_ins") else ""}
	fillable_variables = {'FillText95': markdown_to_plaintext(str(exemption_statute if defined("exemption_statute") else "")), 'FillText8778': markdown_to_plaintext(str(where_to_send if defined("where_to_send") else "")), 'FillText103': markdown_to_plaintext(str((__date.strftime('%m-%d-%Y') if __date != "" else "") if defined("__date") else "")), 'FillText107': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText71': markdown_to_plaintext(str(defendant_full_name)), 'FillText83': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText25': markdown_to_plaintext(str(defendant_full_name if defined("defendant_full_name") else "")), 'FillText999': markdown_to_plaintext(str(pers_prop if defined("pers_prop") else "")), 'FillText75': markdown_to_plaintext(str(levy_no)), 'FillText17': markdown_to_plaintext(str(defendant_address_1 if defined("defendant_address_1") else "")), 'FillText63': markdown_to_plaintext(str(court_branch if defined("court_branch") else "")), 'FillText9997': markdown_to_plaintext(str(life_ins_info if defined("life_ins_info") else "")), 'FillText79': markdown_to_plaintext(str(case_no_)), 'FillText9598': markdown_to_plaintext(str(exempt_facts if defined("exempt_facts") else "")), 'FillText91': markdown_to_plaintext(str(exempt_prop_ if defined("exempt_prop_") else "")), 'FillText87': markdown_to_plaintext(str(jd_name_address if defined("jd_name_address") else "")), 'FillText34': markdown_to_plaintext(str(defendant_email if defined("defendant_email") else "")), 'FillText21': markdown_to_plaintext(str(defendant_address_2 if defined("defendant_address_2") else "")), 'FillText67': markdown_to_plaintext(str(plaintiff_name)), 'FillText59': markdown_to_plaintext(str(court_address2 if defined("court_address2") else "")), 'FillText51': markdown_to_plaintext(str(court_address)), 'FillText38': markdown_to_plaintext(str(county_name)), 'FillText42': markdown_to_plaintext(str(in_pro_per if defined("in_pro_per") else "")), 'FillText26': markdown_to_plaintext(str(defendant_phone if defined("defendant_phone") else ""))}
	post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables, 'fillable_target_variables': fillable_variables }
	fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
	task_id = fill_response.get('task_id')
	filled_attachment_url = ""
	done = False
	pdf_attempts = 0
	while not done and pdf_attempts < 250:
		task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
		done = task_response.get('status') == 'done'
		filled_attachment_url = task_response.get('document')
		pdf_attempts += 1
		time.sleep(.2)
	Bank_Levy_Claim_of_Exemption_a3ec4868fa73 = DAFileCollection()
	Bank_Levy_Claim_of_Exemption_a3ec4868fa73.pdf = DAFile()
	Bank_Levy_Claim_of_Exemption_a3ec4868fa73.pdf.initialize(extension="pdf")
	if done:
		Bank_Levy_Claim_of_Exemption_a3ec4868fa73.pdf.from_url(filled_attachment_url)
		Bank_Levy_Claim_of_Exemption_a3ec4868fa73.info = {'name': 'Bank Levy Claim of Exemption', 'filename': 'Bank_Levy_Claim_of_Exemption', 'description': ''}
	else:
		Bank_Levy_Claim_of_Exemption_a3ec4868fa73.pdf.from_url('https://community.lawyer/static/blank.pdf')
		Bank_Levy_Claim_of_Exemption_a3ec4868fa73.info = {'name': 'We encountered a problem', 'filename': 'Bank_Levy_Claim_of_Exemption', 'description': 'There was a problem filling your Pdf - please try again'}
---
mandatory: |
	True
question: ''
subquestion: |
	Thank you for using this app. Your session is complete.
